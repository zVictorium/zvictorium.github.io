<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" type="image/png" sizes="32x32" href="/classifier/edats/images/favicon32px.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/classifier/edats/images/favicon16px.png">
    <title>Classifier - Age (10)</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <style>
      #result {
        font-weight: bold;
        font-size: 6rem;
        text-align: center;
      }
    </style>
  </head>
  <body>
    
    <main>
      <div class="px-4 py-2 my-2 text-center border-bottom">
        <img class="d-block mx-auto mb-2" src="/classifier/edats/images/logo.png" alt="" width="80" height="80">
        <h1 class="display-5 fw-bold">Classifier - Age (10)</h1>
        </div>
      </div>

      <div class="container mt-5">
        <div class="row">
          <div class="col-12 col-md-4 offset-md-4 text-center">
            <video id="video" playsinline autoplay style="width: 1px;"></video>
            <button class="btn btn-primary mb-2" id="change-camera" onclick="changeCamera();">Change Camera</button>
            <canvas id="canvas" width="400" height="400" style="max-width: 100%;"></canvas>
            <canvas id="anothercanvas" width="150" height="150" style="display: none"></canvas>
            <div id="result" style="font-size: 5rem;"></div>            
          </div>
        </div>
      </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@2.0.0/dist/tf.min.js"></script>

  <script type="text/javascript">

    var size = 400;
    var video = document.getElementById("video");
    var canvas = document.getElementById("canvas");
    var anothercanvas = document.getElementById("anothercanvas");
    var ctx = canvas.getContext("2d");
    var currentStream = null;
    var facingMode = "user";

    var model = null;

    (async() => {
      console.log("Loading model...");
      model = await tf.loadLayersModel("/classifier/ages/10/model/model.json");
      console.log("Model loaded");
    })();

    window.onload = function() {
      showCamera();
    }

    function showCamera() {
      var options = {
        audio: false,
        video: {
          width: size, height: size
        }
      }

      if (navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia(options)
            .then(function(stream) {
              currentStream = stream;
              video.srcObject = currentStream;
              processCamera();
              predict();
            })
            .catch(function(err) {
              alert("Could not use the camera");
              console.log(err);
              alert(err);
            })
      } else {
        alert("There is no getUserMedia function");
      }
    }

    function changeCamera() {
          if (currentStream) {
              currentStream.getTracks().forEach(track => {
                  track.stop();
              });
          }

          facingMode = facingMode == "user" ? "environment" : "user";

          var options = {
              audio: false,
              video: {
                  facingMode: facingMode, width: size, height: size
              }
          };


          navigator.mediaDevices.getUserMedia(options)
              .then(function(stream) {
                  currentStream = stream;
                  video.srcObject = currentStream;
              })
              .catch(function(err) {
                  console.log("Oops, there was an error", err);
              })
      }

    function processCamera() {
      ctx.drawImage(video, 0, 0, size, size, 0, 0, size, size);
      setTimeout(processCamera, 20);
    }

    function predict() {
      if (model != null) {
        resample_single(canvas, 100, 100, anothercanvas);

        var ctx2 = anothercanvas.getContext("2d");
        var imgData = ctx2.getImageData(0,0, 100, 100);

        var arr = [];
        var arr100 = [];

        for (var p=0; p < imgData.data.length; p+= 4) {
          var red = imgData.data[p] / 255;
          var green = imgData.data[p+1] / 255;
          var blue = imgData.data[p+2] / 255;

          var gray = (red+green+blue)/3;

          arr100.push([gray]);
          if (arr100.length == 100) {
            arr.push(arr100);
            arr100 = [];
          }
        }

        arr = [arr];

        var tensor = tf.tensor4d(arr);
        var result = model.predict(tensor).dataSync();
        
        var maxPerCent = Math.max(...result);
        var resultIndex = result.indexOf(maxPerCent);
        
        const ages = ["0 - 10", "10 - 20", "20 - 30", "30 - 40", "40 - 50", "50 - 60", "60 - 70", "70 - 80", "80 - 90", "90 - 100"];
        var response;

        response = ages[resultIndex]
        document.getElementById("result").innerHTML = response;

      }

      setTimeout(predict, 150);
    }

      function resample_single(canvas, width, height, resize_canvas) {
          var width_source = canvas.width;
          var height_source = canvas.height;
          width = Math.round(width);
          height = Math.round(height);

          var ratio_w = width_source / width;
          var ratio_h = height_source / height;
          var ratio_w_half = Math.ceil(ratio_w / 2);
          var ratio_h_half = Math.ceil(ratio_h / 2);

          var ctx = canvas.getContext("2d");
          var ctx2 = resize_canvas.getContext("2d");
          var img = ctx.getImageData(0, 0, width_source, height_source);
          var img2 = ctx2.createImageData(width, height);
          var data = img.data;
          var data2 = img2.data;

          for (var j = 0; j < height; j++) {
              for (var i = 0; i < width; i++) {
                  var x2 = (i + j * width) * 4;
                  var weight = 0;
                  var weights = 0;
                  var weights_alpha = 0;
                  var gx_r = 0;
                  var gx_g = 0;
                  var gx_b = 0;
                  var gx_a = 0;
                  var center_y = (j + 0.5) * ratio_h;
                  var yy_start = Math.floor(j * ratio_h);
                  var yy_stop = Math.ceil((j + 1) * ratio_h);
                  for (var yy = yy_start; yy < yy_stop; yy++) {
                      var dy = Math.abs(center_y - (yy + 0.5)) / ratio_h_half;
                      var center_x = (i + 0.5) * ratio_w;
                      var w0 = dy * dy;
                      var xx_start = Math.floor(i * ratio_w);
                      var xx_stop = Math.ceil((i + 1) * ratio_w);
                      for (var xx = xx_start; xx < xx_stop; xx++) {
                          var dx = Math.abs(center_x - (xx + 0.5)) / ratio_w_half;
                          var w = Math.sqrt(w0 + dx * dx);
                          if (w >= 1) {
                              continue;
                          }
                          weight = 2 * w * w * w - 3 * w * w + 1;
                          var pos_x = 4 * (xx + yy * width_source);
                          gx_a += weight * data[pos_x + 3];
                          weights_alpha += weight;
                          if (data[pos_x + 3] < 255)
                              weight = weight * data[pos_x + 3] / 250;
                          gx_r += weight * data[pos_x];
                          gx_g += weight * data[pos_x + 1];
                          gx_b += weight * data[pos_x + 2];
                          weights += weight;
                      }
                  }
                  data2[x2] = gx_r / weights;
                  data2[x2 + 1] = gx_g / weights;
                  data2[x2 + 2] = gx_b / weights;
                  data2[x2 + 3] = gx_a / weights_alpha;
              }
          }

          ctx2.putImageData(img2, 0, 0);
      }
  </script>
  </body>
</html>